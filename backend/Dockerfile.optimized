# ==============================================
# 虚拟卡管理系统 - 后端服务 Dockerfile
# 多阶段构建，优化镜像大小和构建速度
# ==============================================

# ==================== 构建阶段 ====================
FROM node:20-alpine AS builder

# 设置工作目录
WORKDIR /app

# 安装构建依赖
RUN apk add --no-cache \
    python3 \
    make \
    g++ \
    curl

# 复制依赖配置文件
COPY package*.json ./
COPY tsconfig.json ./

# 安装所有依赖（包括devDependencies）
RUN npm ci --only=production=false

# 复制Prisma schema
COPY prisma ./prisma

# 生成Prisma客户端
RUN npx prisma generate

# 复制源代码
COPY src ./src

# 构建TypeScript
RUN npm run build

# 清理devDependencies，只保留生产依赖
RUN npm prune --production

# ==================== 生产阶段 ====================
FROM node:20-alpine AS production

# 安装运行时依赖（包含OpenSSL 1.1.x以兼容Prisma）
RUN apk add --no-cache \
    curl \
    tzdata \
    tini \
    openssl \
    openssl1.1-compat

# 设置时区
ENV TZ=Asia/Shanghai

# 创建非root用户
RUN addgroup -g 1001 -S nodejs && \
    adduser -S vcard -u 1001 -G nodejs

# 设置工作目录
WORKDIR /app

# 从builder复制必要文件
COPY --from=builder --chown=vcard:nodejs /app/dist ./dist
COPY --from=builder --chown=vcard:nodejs /app/node_modules ./node_modules
COPY --from=builder --chown=vcard:nodejs /app/package*.json ./
COPY --from=builder --chown=vcard:nodejs /app/prisma ./prisma

# 创建日志目录
RUN mkdir -p /app/logs && chown -R vcard:nodejs /app/logs

# 切换到非root用户
USER vcard

# 暴露端口
EXPOSE 3001

# 健康检查
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD curl -f http://localhost:3001/api/health || exit 1

# 使用tini作为init进程（处理信号和僵尸进程）
ENTRYPOINT ["/sbin/tini", "--"]

# 启动应用
CMD ["node", "dist/index.js"]

