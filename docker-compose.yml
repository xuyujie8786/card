version: '3.8'

networks:
  vcard-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  backend_logs:
    driver: local
  nginx_logs:
    driver: local

services:
  # PostgreSQL数据库
  database:
    image: postgres:15-alpine
    container_name: vcard-postgres
    environment:
      POSTGRES_DB: ${DB_NAME:-vcard_db}
      POSTGRES_USER: ${DB_USER:-vcard_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-secure_password123}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/prisma/migrations:/docker-entrypoint-initdb.d/
    ports:
      - "${DB_PORT:-5432}:5432"
    networks:
      - vcard-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-vcard_user} -d ${DB_NAME:-vcard_db}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Redis缓存
  redis:
    image: redis:7-alpine
    container_name: vcard-redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_password123}
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    networks:
      - vcard-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # 后端服务
  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    container_name: vcard-backend
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      PORT: 3001
      TZ: ${TZ:-Asia/Shanghai}
      DATABASE_URL: postgresql://${DB_USER:-vcard_user}:${DB_PASSWORD:-secure_password123}@database:5432/${DB_NAME:-vcard_db}
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis_password123}@redis:6379
      JWT_SECRET: ${JWT_SECRET:-your_jwt_secret_key_here}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN:-7d}
      CARD_PROVIDER_TOKEN: ${CARD_PROVIDER_TOKEN}
      CARD_PROVIDER_URL: ${CARD_PROVIDER_URL:-https://openapi-hk.vccdaddy.com}
      LOG_LEVEL: ${LOG_LEVEL:-info}
      RATE_LIMIT_WINDOW_MS: ${RATE_LIMIT_WINDOW_MS:-900000}
      RATE_LIMIT_MAX_REQUESTS: ${RATE_LIMIT_MAX_REQUESTS:-100}
      # 定时同步任务配置
      SYNC_ENABLED: ${SYNC_ENABLED:-true}
      SYNC_AUTH_PREVIOUS_CRON: ${SYNC_AUTH_PREVIOUS_CRON:-0 1 * * *}
      SYNC_AUTH_CURRENT_CRON: ${SYNC_AUTH_CURRENT_CRON:-0 13 * * *}
      SYNC_SETTLE_PREVIOUS_CRON: ${SYNC_SETTLE_PREVIOUS_CRON:-30 1 * * *}
      SYNC_SETTLE_CURRENT_CRON: ${SYNC_SETTLE_CURRENT_CRON:-30 13 * * *}
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "${BACKEND_PORT:-3001}:3001"
    networks:
      - vcard-network
    restart: unless-stopped
    volumes:
      - backend_logs:/app/logs
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3001/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # 前端服务
  frontend:
    build:
      context: ./v1
      dockerfile: Dockerfile
    container_name: vcard-frontend
    depends_on:
      backend:
        condition: service_healthy
    ports:
      - "${FRONTEND_PORT:-8000}:80"
    networks:
      - vcard-network
    restart: unless-stopped
    volumes:
      - nginx_logs:/var/log/nginx
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
